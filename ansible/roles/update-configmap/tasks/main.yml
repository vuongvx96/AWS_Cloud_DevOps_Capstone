- name: ensure python3 is installed
  become: yes
  ansible.builtin.package:
    name:
      - python3
      - python3-pip
    state: present

- name: install kubernetes pip package
  pip:
    name: kubernetes
    state: present

- name: Set backend appsettings variable
  set_fact:
    backendsettings:
      ConnectionStrings:
        GloboTicketTicketManagementConnectionString: "server={{ DB_HOST }};port={{ DB_PORT }};user={{ DB_USERNAME }};password={{ DB_PASSWORD }};Database={{ DB_NAME }}"
        GloboTicketIdentityConnectionString: "server={{ DB_HOST }};port={{ DB_PORT }};user={{ DB_USERNAME }};password={{ DB_PASSWORD }};Database={{ IDENTITY_DB_NAME }};"
      AllowedHosts: "*"
      EmailSettings:
        FromAddress: "{{ EMAIL_FROMADDRESS }}"
        ApiKey: "{{ EMAIL_APIKEY }}"
        FromName: "{{ EMAIL_FROMNAME }}"
      JwtSettings:
        Key: "{{ JWT_SECRECT_KEY }}"
        Issuer: "{{ JWT_ISSUER }}"
        Audience: "{{ JWT_AUDIENCE }}"
        DurationInMinutes: "{{ JWT_EXPIRE_TIME }}"

- name: Set frontend appsettings variable
  set_fact:
    frontendsettings:
      apiUrl: "{{ BACKEND_URL }}"

- name: Create configmap for backend using server side apply
  kubernetes.core.k8s:
    namespace: default
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: globoticket-api-config
      data:
        appsettings.k8s.json: "{{ backendsettings | to_json }}"
    apply: yes
    server_side_apply:
      field_manager: ansible

- name: Create configmap for frontend using server side apply
  kubernetes.core.k8s:
    namespace: default
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: globoticket-app-config
      data:
        appsettings.json: "{{ frontendsettings | to_json }}"
    apply: yes
    server_side_apply:
      field_manager: ansible