version: 2.1
orbs:
  slack: circleci/slack@4.1
  sonarcloud: sonarsource/sonarcloud@1.0.3

jobs:
  linting:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    steps:
      - checkout
      - run:
          name: Install project dependencies
          command: dotnet restore
      - run:
          name: Run Code Linting
          command: dotnet build --no-incremental

  build-backend:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "GloboTicket.TicketManagement.Api/GloboTicket.TicketManagement.Api.csproj" }}
      - run:
          name: "Install project dependencies"
          command: dotnet restore GloboTicket.TicketManagement.Api
      - run:
          name: Build backend-end
          command: dotnet build GloboTicket.TicketManagement.Api
      - save_cache:
          paths:
            - /root/.nuget/packages
          key: dotnet-packages-v1-{{ checksum "GloboTicket.TicketManagement.Api/GloboTicket.TicketManagement.Api.csproj" }}

  build-frontend:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "GloboTicket.TicketManagement.App/GloboTicket.TicketManagement.App.csproj" }}
      - run:
          name: Install project dependencies
          command: dotnet restore GloboTicket.TicketManagement.App
      - run:
          name: Build front-end
          command: dotnet build GloboTicket.TicketManagement.App
      - save_cache:
          paths:
            - /root/.nuget/packages
          key: dotnet-packages-v1-{{ checksum "GloboTicket.TicketManagement.App/GloboTicket.TicketManagement.App.csproj" }}

  unit-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    steps:
      - checkout
      - run:
          name: Install project dependencies
          command: dotnet restore
      - run:
          name: Run Application Unit Tests
          command: dotnet test GloboTicket.TicketManagement.Application.UnitTests

  integration-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    steps:
      - checkout
      - run:
          name: Install project dependencies
          command: dotnet restore
      - run:
          name: Run Persistence Tests
          command: dotnet test GloboTicket.TicketManagement.Persistence.IntegrationTests
      - run:
          name: Run API Integration Tests
          command: dotnet test GloboTicket.TicketManagement.API.IntegrationTests

  sonarqube-scan:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - sonarcloud/scan

  upload-docker:
    docker:
      - image: cimg/go:1.18.2
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build docker container
          command: |
            docker build -f GloboTicket.TicketManagement.Api/Dockerfile --tag=$DOCKER_IMAGE_NAME .
            docker image ls
      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID

workflows:
  default:
    jobs:
      - linting
      - build-backend:
          requires: [linting]
      - build-frontend:
          requires: [linting]
      - unit-test:
          requires: [build-backend]
      - integration-test:
          requires: [build-backend]
      - sonarqube-scan:
          requires:
            - build-backend
            - build-frontend
      - upload-docker:
          requires:
            - unit-test
            - integration-test
          filters:
            branches:
              only: [ master ]