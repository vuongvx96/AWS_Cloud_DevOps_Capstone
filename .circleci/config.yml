version: 2.1
orbs:
  slack: circleci/slack@4.1
  sonarcloud: sonarsource/sonarcloud@1.0.3

jobs:
  linting:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    steps:
      - checkout
      - run:
          name: Install project dependencies
          command: dotnet restore
      - run:
          name: Run Code Linting
          command: dotnet build --no-incremental

  build-backend:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "GloboTicket.TicketManagement.Api/GloboTicket.TicketManagement.Api.csproj" }}
      - run:
          name: "Install project dependencies"
          command: dotnet restore GloboTicket.TicketManagement.Api
      - run:
          name: Build backend-end
          command: dotnet build GloboTicket.TicketManagement.Api
      - save_cache:
          paths:
            - /root/.nuget/packages
          key: dotnet-packages-v1-{{ checksum "GloboTicket.TicketManagement.Api/GloboTicket.TicketManagement.Api.csproj" }}

  build-frontend:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "GloboTicket.TicketManagement.App/GloboTicket.TicketManagement.App.csproj" }}
      - run:
          name: Install project dependencies
          command: dotnet restore GloboTicket.TicketManagement.App
      - run:
          name: Build front-end
          command: dotnet build GloboTicket.TicketManagement.App
      - save_cache:
          paths:
            - /root/.nuget/packages
          key: dotnet-packages-v1-{{ checksum "GloboTicket.TicketManagement.App/GloboTicket.TicketManagement.App.csproj" }}

  unit-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    steps:
      - checkout
      - run:
          name: Install project dependencies
          command: dotnet restore
      - run:
          name: Run Application Unit Tests
          command: dotnet test GloboTicket.TicketManagement.Application.UnitTests

  integration-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    steps:
      - checkout
      - run:
          name: Install project dependencies
          command: dotnet restore
      - run:
          name: Run Persistence Tests
          command: dotnet test GloboTicket.TicketManagement.Persistence.IntegrationTests
      - run:
          name: Run API Integration Tests
          command: dotnet test GloboTicket.TicketManagement.API.IntegrationTests

  sonarqube-scan:
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - sonarcloud/scan

  upload-docker:
    docker:
      - image: cimg/go:1.18.2
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build docker container
          command: |
            docker build -f GloboTicket.TicketManagement.Api/Dockerfile --tag=$DOCKER_IMAGE_NAME .
            docker image ls
      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure EKS network exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/network-parameters.json
      - run:
          name: Ensure EKS Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/cluster-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Ensure Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodegroup.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/nodegroup-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/management.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/management-parameters.json \
              --output text >> ~/checkIfDeployed.txt
            cat ~/checkIfDeployed.txt
      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - checkIfDeployed.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["86:d8:bf:57:8f:a4:0e:da:d5:3a:88:01:31:9f:7d:d8"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-server.yml
              fi

  configure-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d4:2f:91:66:b5:0d:84:24:4a:09:2c:d6:8a:c1:0f:91"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-cluster.yml
              fi
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                echo "Wait 60 seconds..."
                sleep 60
              fi
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt save-elb-dns.yml
            cat ~/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_dns.txt

  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d4:2f:91:66:b5:0d:84:24:4a:09:2c:d6:8a:c1:0f:91"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy newest Docker Image
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt deploy-app.yml
          no_output_timeout: 2m

workflows:
  default:
    jobs:
      - linting
      - build-backend:
          requires: [linting]
      - build-frontend:
          requires: [linting]
      - unit-test:
          requires: [build-backend]
      - integration-test:
          requires: [build-backend]
      - sonarqube-scan:
          requires:
            - build-backend
            - build-frontend
      - upload-docker:
          requires:
            - unit-test
            - integration-test
          filters:
            branches:
              only: [ master ]
      - deploy-infrastructure:
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - configure-cluster:
          requires:
            - configure-infrastructure
            - upload-docker
      - deploy-docker:
          requires:
            - configure-cluster